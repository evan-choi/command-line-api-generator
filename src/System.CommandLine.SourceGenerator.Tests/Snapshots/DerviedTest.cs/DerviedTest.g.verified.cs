//HintName: DerviedTest.g.cs
// <auto-generated/>
using global::System.CommandLine.SourceGenerator.Common;

namespace System.CommandLine.SourceGenerator.Tests
{
    public class DerviedTestOptions
    {
        public ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.DerviedTest> Handler { get; set; }
    }

    public static class DerviedTestFactory
    {
        public static global::System.CommandLine.RootCommand Create()
        {
            return Create(null);
        }

        public static global::System.CommandLine.RootCommand Create(DerviedTestOptions options)
        {
            var symbol = new global::System.CommandLine.Option<global::System.Int32>("--virtual-has-option-override", null);
            var symbol1 = new global::System.CommandLine.Option<global::System.Int32>("--virtual-no-option", null);
            var symbol2 = new global::System.CommandLine.Option<global::System.Int32>("--option", null);
            var handlerAdapter = new DerviedTestCommandHandlerAdapter(options.Handler, symbol, symbol1, symbol2);
            var cmd = new global::System.CommandLine.RootCommand("")
            {
                Handler = handlerAdapter
            };
            cmd.AddOption(symbol);
            cmd.AddOption(symbol1);
            cmd.AddOption(symbol2);
            return cmd;
        }

        private sealed class DerviedTestCommandHandlerAdapter : global::System.CommandLine.Invocation.ICommandHandler
        {
            private readonly ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.DerviedTest> _commandHandler;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Int32> _symbolVirtualHasOption;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Int32> _symbolVirtualNoOption;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Int32> _symbolOption;

            public DerviedTestCommandHandlerAdapter(
                ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.DerviedTest> commandHandler,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Int32> symbolVirtualHasOption,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Int32> symbolVirtualNoOption,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Int32> symbolOption)
            {
                _commandHandler = commandHandler;
                _symbolVirtualHasOption = symbolVirtualHasOption;
                _symbolVirtualNoOption = symbolVirtualNoOption;
                _symbolOption = symbolOption;
            }

            public int Invoke(global::System.CommandLine.Invocation.InvocationContext context)
            {
                return InvokeAsync(context).Result;
            }

            public global::System.Threading.Tasks.Task<int> InvokeAsync(global::System.CommandLine.Invocation.InvocationContext context)
            {
                var command = new global::System.CommandLine.SourceGenerator.Tests.DerviedTest()
                {
                    VirtualHasOption = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Int32>(_symbolVirtualHasOption, context),
                    VirtualNoOption = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Int32>(_symbolVirtualNoOption, context),
                    Option = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Int32>(_symbolOption, context)
                };
                return _commandHandler.InvokeAsync(command);
            }
        }
    }
}
