//HintName: GenericTest_complex.g.cs
// <auto-generated/>
using global::System.CommandLine.SourceGenerator.Common;

namespace System.CommandLine.SourceGenerator.Tests
{
    public static class GenericTest_complexFactory
    {
        public static global::System.CommandLine.RootCommand Create<T, T2>()
            where T : class, global::System.IDisposable, new()
            where T2 : T
        {
            var cmd = new global::System.CommandLine.RootCommand("")
            {
                Handler = new GenericTest_complexCommandHandler<T, T2>()
            };
            return cmd;
        }

        private sealed class GenericTest_complexCommandHandler<T, T2> : global::System.CommandLine.Invocation.ICommandHandler
            where T : class, global::System.IDisposable, new()
            where T2 : T
        {
            public int Invoke(global::System.CommandLine.Invocation.InvocationContext context)
            {
                return InvokeAsync(context).Result;
            }

            public global::System.Threading.Tasks.Task<int> InvokeAsync(global::System.CommandLine.Invocation.InvocationContext context)
            {
                var command = new global::System.CommandLine.SourceGenerator.Tests.GenericTest_complex<T, T2>();
                var handler = new global::System.CommandLine.SourceGenerator.Tests.GenericTest_complex_CommandHandler<T, T2>();
                return handler.InvokeAsync(command);
            }
        }
    }
}
