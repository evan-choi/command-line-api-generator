//HintName: CommandHandlerTest.g.cs
// <auto-generated/>
using global::System.CommandLine.SourceGenerator.Common;

namespace System.CommandLine.SourceGenerator.Tests
{
    public static class CommandHandlerTestFactory
    {
        public static global::System.CommandLine.RootCommand Create()
        {
            var symbol = new global::System.CommandLine.Option<global::System.Boolean>("--global", null);
            var symbol1 = new global::System.CommandLine.Option<global::System.String>("--string", null);
            var symbol2 = new global::System.CommandLine.Option<global::System.String[]>("--string-array", null);
            var symbol3 = new global::System.CommandLine.Option<global::System.Int32>("--int", "Description: IntProperty")
            {
                Arity = global::System.CommandLine.ArgumentArity.ZeroOrOne,
                AllowMultipleArgumentsPerToken = true,
                ArgumentHelpName = "ArgumentHelpName: IntProperty",
                Description = "Description2: IntProperty",
                IsHidden = true,
                IsRequired = true,
                Name = "--int2"
            };
            symbol3.AddAlias("--int32");
            symbol3.AddAlias("-i");
            var symbol4 = new global::System.CommandLine.Option<global::System.Int32?>("--nullable-int", "Description: NullableIntProperty");
            var symbol5 = new global::System.CommandLine.Argument<global::System.Double>("Argument", null)
            {
                Arity = new global::System.CommandLine.ArgumentArity(2, 4)
            };
            var cmd = new global::System.CommandLine.RootCommand("")
            {
                Handler = new CommandHandlerTestCommandHandler(symbol, symbol1, symbol2, symbol3, symbol4, symbol5)
            };
            cmd.AddGlobalOption(symbol);
            cmd.AddOption(symbol1);
            cmd.AddOption(symbol2);
            cmd.AddOption(symbol3);
            cmd.AddOption(symbol4);
            cmd.AddArgument(symbol5);
            cmd.AddCommand(global::System.CommandLine.SourceGenerator.Tests.SubFactory.Create());
            return cmd;
        }

        private sealed class CommandHandlerTestCommandHandler : global::System.CommandLine.Invocation.ICommandHandler
        {
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolGlobalProperty;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.String> _symbolStringProperty;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.String[]> _symbolStringArrayProperty;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Int32> _symbolIntProperty;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Int32?> _symbolNullableIntProperty;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Double> _symbolDoubleProperty;

            public CommandHandlerTestCommandHandler(
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolGlobalProperty,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.String> symbolStringProperty,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.String[]> symbolStringArrayProperty,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Int32> symbolIntProperty,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Int32?> symbolNullableIntProperty,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Double> symbolDoubleProperty)
            {
                _symbolGlobalProperty = symbolGlobalProperty;
                _symbolStringProperty = symbolStringProperty;
                _symbolStringArrayProperty = symbolStringArrayProperty;
                _symbolIntProperty = symbolIntProperty;
                _symbolNullableIntProperty = symbolNullableIntProperty;
                _symbolDoubleProperty = symbolDoubleProperty;
            }

            public int Invoke(global::System.CommandLine.Invocation.InvocationContext context)
            {
                return InvokeAsync(context).Result;
            }

            public global::System.Threading.Tasks.Task<int> InvokeAsync(global::System.CommandLine.Invocation.InvocationContext context)
            {
                var command = new global::System.CommandLine.SourceGenerator.Tests.CommandHandlerTest()
                {
                    GlobalProperty = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolGlobalProperty, context),
                    StringProperty = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.String>(_symbolStringProperty, context),
                    StringArrayProperty = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.String[]>(_symbolStringArrayProperty, context),
                    IntProperty = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Int32>(_symbolIntProperty, context),
                    NullableIntProperty = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Int32?>(_symbolNullableIntProperty, context),
                    DoubleProperty = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Double>(_symbolDoubleProperty, context)
                };
                var handler = new global::System.CommandLine.SourceGenerator.Tests.CommandHandlerTest_CommandHandler();
                return handler.InvokeAsync(command);
            }
        }
    }
}
