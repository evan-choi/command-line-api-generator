//HintName: ArgumentArityEnumTest.g.cs
// <auto-generated/>
using global::System.CommandLine.SourceGenerator.Common;

namespace System.CommandLine.SourceGenerator.Tests
{
    public class ArgumentArityEnumTestOptions
    {
        public ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.ArgumentArityEnumTest> Handler { get; set; }
    }

    public static class ArgumentArityEnumTestFactory
    {
        public static global::System.CommandLine.RootCommand Create()
        {
            return Create(null);
        }

        public static global::System.CommandLine.RootCommand Create(ArgumentArityEnumTestOptions options)
        {
            var symbol = new global::System.CommandLine.Option<global::System.Boolean>("--Option-Zero", null)
            {
                Arity = global::System.CommandLine.ArgumentArity.Zero
            };
            var symbol1 = new global::System.CommandLine.Option<global::System.Boolean>("--Option-ZeroOrOne", null)
            {
                Arity = global::System.CommandLine.ArgumentArity.ZeroOrOne
            };
            var symbol2 = new global::System.CommandLine.Option<global::System.Boolean>("--Option-ExactlyOne", null)
            {
                Arity = global::System.CommandLine.ArgumentArity.ExactlyOne
            };
            var symbol3 = new global::System.CommandLine.Option<global::System.Boolean>("--Option-ZeroOrMore", null)
            {
                Arity = global::System.CommandLine.ArgumentArity.ZeroOrMore
            };
            var symbol4 = new global::System.CommandLine.Option<global::System.Boolean>("--Option-OneOrMore", null)
            {
                Arity = global::System.CommandLine.ArgumentArity.OneOrMore
            };
            var symbol5 = new global::System.CommandLine.Argument<global::System.Boolean>("--Argument-Zero", null)
            {
                Arity = global::System.CommandLine.ArgumentArity.Zero
            };
            var symbol6 = new global::System.CommandLine.Argument<global::System.Boolean>("--Argument-ZeroOrOne", null)
            {
                Arity = global::System.CommandLine.ArgumentArity.ZeroOrOne
            };
            var symbol7 = new global::System.CommandLine.Argument<global::System.Boolean>("--Argument-ExactlyOne", null)
            {
                Arity = global::System.CommandLine.ArgumentArity.ExactlyOne
            };
            var symbol8 = new global::System.CommandLine.Argument<global::System.Boolean>("--Argument-ZeroOrMore", null)
            {
                Arity = global::System.CommandLine.ArgumentArity.ZeroOrMore
            };
            var symbol9 = new global::System.CommandLine.Argument<global::System.Boolean>("--Argument-OneOrMore", null)
            {
                Arity = global::System.CommandLine.ArgumentArity.OneOrMore
            };
            ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.ArgumentArityEnumTest> handler = null;
            if (options != null)
                handler = options.Handler;
            global::System.CommandLine.Invocation.ICommandHandler handlerAdapter = null;
            if (handler != null)
                handlerAdapter = new ArgumentArityEnumTestCommandHandlerAdapter(handler, symbol, symbol1, symbol2, symbol3, symbol4, symbol5, symbol6, symbol7, symbol8, symbol9);
            var cmd = new global::System.CommandLine.RootCommand("")
            {
                Handler = handlerAdapter
            };
            cmd.AddOption(symbol);
            cmd.AddOption(symbol1);
            cmd.AddOption(symbol2);
            cmd.AddOption(symbol3);
            cmd.AddOption(symbol4);
            cmd.AddArgument(symbol5);
            cmd.AddArgument(symbol6);
            cmd.AddArgument(symbol7);
            cmd.AddArgument(symbol8);
            cmd.AddArgument(symbol9);
            return cmd;
        }

        private sealed class ArgumentArityEnumTestCommandHandlerAdapter : global::System.CommandLine.Invocation.ICommandHandler
        {
            private readonly ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.ArgumentArityEnumTest> _commandHandler;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolOptionZero;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolOptionZeroOrOne;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolOptionExactlyOne;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolOptionZeroOrMore;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolOptionOneOrMore;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolArgumentZero;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolArgumentZeroOrOne;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolArgumentExactlyOne;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolArgumentZeroOrMore;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> _symbolArgumentOneOrMore;

            public ArgumentArityEnumTestCommandHandlerAdapter(
                ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.ArgumentArityEnumTest> commandHandler,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolOptionZero,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolOptionZeroOrOne,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolOptionExactlyOne,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolOptionZeroOrMore,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolOptionOneOrMore,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolArgumentZero,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolArgumentZeroOrOne,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolArgumentExactlyOne,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolArgumentZeroOrMore,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.Boolean> symbolArgumentOneOrMore)
            {
                _commandHandler = commandHandler;
                _symbolOptionZero = symbolOptionZero;
                _symbolOptionZeroOrOne = symbolOptionZeroOrOne;
                _symbolOptionExactlyOne = symbolOptionExactlyOne;
                _symbolOptionZeroOrMore = symbolOptionZeroOrMore;
                _symbolOptionOneOrMore = symbolOptionOneOrMore;
                _symbolArgumentZero = symbolArgumentZero;
                _symbolArgumentZeroOrOne = symbolArgumentZeroOrOne;
                _symbolArgumentExactlyOne = symbolArgumentExactlyOne;
                _symbolArgumentZeroOrMore = symbolArgumentZeroOrMore;
                _symbolArgumentOneOrMore = symbolArgumentOneOrMore;
            }

            public int Invoke(global::System.CommandLine.Invocation.InvocationContext context)
            {
                return InvokeAsync(context).Result;
            }

            public global::System.Threading.Tasks.Task<int> InvokeAsync(global::System.CommandLine.Invocation.InvocationContext context)
            {
                var command = new global::System.CommandLine.SourceGenerator.Tests.ArgumentArityEnumTest()
                {
                    OptionZero = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolOptionZero, context),
                    OptionZeroOrOne = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolOptionZeroOrOne, context),
                    OptionExactlyOne = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolOptionExactlyOne, context),
                    OptionZeroOrMore = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolOptionZeroOrMore, context),
                    OptionOneOrMore = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolOptionOneOrMore, context),
                    ArgumentZero = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolArgumentZero, context),
                    ArgumentZeroOrOne = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolArgumentZeroOrOne, context),
                    ArgumentExactlyOne = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolArgumentExactlyOne, context),
                    ArgumentZeroOrMore = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolArgumentZeroOrMore, context),
                    ArgumentOneOrMore = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.Boolean>(_symbolArgumentOneOrMore, context)
                };
                return _commandHandler.InvokeAsync(command);
            }
        }
    }
}
