//HintName: ArgumentTest.g.cs
// <auto-generated/>
using global::System.CommandLine.SourceGenerator.Common;

namespace System.CommandLine.SourceGenerator.Tests
{
    public class ArgumentTestOptions
    {
        public ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.ArgumentTest> Handler { get; set; }
    }

    public static class ArgumentTestFactory
    {
        public static global::System.CommandLine.RootCommand Create()
        {
            return Create(null);
        }

        public static global::System.CommandLine.RootCommand Create(ArgumentTestOptions options)
        {
            var symbol = new global::System.CommandLine.Argument<global::System.String>();
            var symbol1 = new global::System.CommandLine.Argument<global::System.String>("Name", "Description")
            {
                Arity = global::System.CommandLine.ArgumentArity.Zero,
                HelpName = "HelpName",
                IsHidden = true
            };
            ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.ArgumentTest> handler = null;
            if (options != null)
                handler = options.Handler;
            global::System.CommandLine.Invocation.ICommandHandler handlerAdapter = null;
            if (handler != null)
                handlerAdapter = new ArgumentTestCommandHandlerAdapter(handler, symbol, symbol1);
            var cmd = new global::System.CommandLine.RootCommand("")
            {
                Handler = handlerAdapter
            };
            cmd.AddArgument(symbol);
            cmd.AddArgument(symbol1);
            return cmd;
        }

        private sealed class ArgumentTestCommandHandlerAdapter : global::System.CommandLine.Invocation.ICommandHandler
        {
            private readonly ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.ArgumentTest> _commandHandler;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.String> _symbolSimple;
            private readonly global::System.CommandLine.Binding.IValueDescriptor<global::System.String> _symbolFull;

            public ArgumentTestCommandHandlerAdapter(
                ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.ArgumentTest> commandHandler,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.String> symbolSimple,
                global::System.CommandLine.Binding.IValueDescriptor<global::System.String> symbolFull)
            {
                _commandHandler = commandHandler;
                _symbolSimple = symbolSimple;
                _symbolFull = symbolFull;
            }

            public int Invoke(global::System.CommandLine.Invocation.InvocationContext context)
            {
                return InvokeAsync(context).Result;
            }

            public global::System.Threading.Tasks.Task<int> InvokeAsync(global::System.CommandLine.Invocation.InvocationContext context)
            {
                var command = new global::System.CommandLine.SourceGenerator.Tests.ArgumentTest()
                {
                    Simple = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.String>(_symbolSimple, context),
                    Full = ValueDesriptorHelper.GetValueForHandlerParameter<global::System.String>(_symbolFull, context)
                };
                return _commandHandler.InvokeAsync(command);
            }
        }
    }
}
