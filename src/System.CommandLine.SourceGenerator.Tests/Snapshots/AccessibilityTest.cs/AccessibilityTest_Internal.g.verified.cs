//HintName: AccessibilityTest_Internal.g.cs
// <auto-generated/>
using global::System.CommandLine.SourceGenerator.Common;

namespace System.CommandLine.SourceGenerator.Tests
{
    internal class AccessibilityTest_InternalOptions
    {
        public ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.AccessibilityTest_Internal> Handler { get; set; }
    }

    internal static class AccessibilityTest_InternalFactory
    {
        public static global::System.CommandLine.RootCommand Create()
        {
            return Create(null);
        }

        public static global::System.CommandLine.RootCommand Create(AccessibilityTest_InternalOptions options)
        {
            ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.AccessibilityTest_Internal> handler = null;
            if (options != null)
                handler = options.Handler;
            global::System.CommandLine.Invocation.ICommandHandler handlerAdapter = null;
            if (handler != null)
                handlerAdapter = new AccessibilityTest_InternalCommandHandlerAdapter(handler);
            var cmd = new global::System.CommandLine.RootCommand("")
            {
                Handler = handlerAdapter
            };
            return cmd;
        }

        private sealed class AccessibilityTest_InternalCommandHandlerAdapter : global::System.CommandLine.Invocation.ICommandHandler
        {
            private readonly ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.AccessibilityTest_Internal> _commandHandler;

            public AccessibilityTest_InternalCommandHandlerAdapter(ICommandHandler<global::System.CommandLine.SourceGenerator.Tests.AccessibilityTest_Internal> commandHandler)
            {
                _commandHandler = commandHandler;
            }

            public int Invoke(global::System.CommandLine.Invocation.InvocationContext context)
            {
                return InvokeAsync(context).Result;
            }

            public global::System.Threading.Tasks.Task<int> InvokeAsync(global::System.CommandLine.Invocation.InvocationContext context)
            {
                var command = new global::System.CommandLine.SourceGenerator.Tests.AccessibilityTest_Internal();
                return _commandHandler.InvokeAsync(command);
            }
        }
    }
}
